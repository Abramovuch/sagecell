#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o xtrace

SSHOPTIONS="-oNoHostAuthenticationForLocalhost=yes -i sagecell_rsa"
SSH="ssh $SSHOPTIONS -p $VMPORT -T $VMSSH"
SSHTTY="ssh $SSHOPTIONS -p $VMPORT -tt $VMSSH"
SCP="scp $SSHOPTIONS -P $VMPORT"
MAKE="make -j4"

function remove_install_log {
    rm -f install.log
}

function update_system {
    $SSH <<EOF | tee -a install.log
        echo 'Updating system'
        yum -y update
        yum clean all
EOF
}

function install_extra_system_packages {
    $SCP vm/vmfiles/sagecell/repos/* $VMSSH:/etc/yum.repos.d/
    $SSH <<EOF | tee -a install.log
        echo 'Installing extra system packages'
        yum -y install ffmpeg --enablerepo=atrpms
EOF
}

function kill_monitor {
    $SSH <<EOF | tee -a install.log
        echo "Removing cron scripts"
        rm -rf /etc/cron.d/sagecell*
EOF
}

function remove_accounts {
    $SSH <<EOF | tee -a install.log
  echo 'Removing sage accounts'
  killall -u sageworker -SIGKILL
  killall -u sageserver -SIGKILL
  pushd /home/sageworker
  chattr -R -i .ssh .bashrc .bash_profile .bash_logout
  chattr -i .sage .sage/init.sage
  popd
  /usr/sbin/userdel -rf sageworker
  /usr/sbin/userdel -rf sageserver
  if grep sagecell /etc/group; then
    /usr/sbin/groupdel sagecell
  fi
EOF
}

function set_up_sageserver_account {
    $SSH <<EOF | tee -a install.log
  /usr/sbin/groupadd sagecell
  /usr/sbin/useradd sageserver --groups sagecell

  echo 'Setting up ssh keys'
  if ! [ -f /home/sageserver/.ssh/id_rsa ]; then
    su -l sageserver -c 'ssh-keygen -q -N "" -f /home/sageserver/.ssh/id_rsa'
  fi
  restorecon -R /home/sageserver/.ssh
EOF
}

function set_up_sageworker_account {
    $SSH <<EOF | tee -a install.log
  /usr/sbin/useradd sageworker --groups sagecell

  echo 'Setting up ssh keys'
  su -l sageworker -c 'mkdir .ssh && chmod 700 .ssh'
  cp -r /home/sageserver/.ssh/id_rsa.pub /home/sageworker/.ssh/authorized_keys
  chown -R sageworker.sageworker /home/sageworker/
  restorecon -R /home/sageworker/.ssh

  echo 'Setting up permissions for sage worker'
  pushd /home/sageworker
  chattr -R +i .ssh .bashrc .bash_profile .bash_logout
  popd

  echo 'Setting quotas'
  setquota -u sageworker 1000000 1200000 20000 30000 /

  # change permissions so sageworker can execute sage later
  chmod o+rx /home/sageserver
EOF

$SSHTTY <<EOF
  # get the localhost in the known_hosts file
  su -l sageserver -c 'ssh -q -oStrictHostKeyChecking=no sageworker@localhost echo done'
  exit
EOF
}

function make_tmp_dir {

    $SSH <<EOF | tee -a install.log
  echo 'Making temporary directory'
  rm -rf /tmp/sagecell
  mkdir /tmp/sagecell
  chown sageserver.sagecell /tmp/sagecell
  chmod g=wxs,o= /tmp/sagecell
EOF
}

function upload_repositories {
    echo 'Copying repositories'
    rsync -av -e "ssh $SSHOPTIONS -p $VMPORT" github $VMSSH:/home/sageserver
    $SSH <<EOF | tee -a install.log
        chown -R sageserver:sageserver /home/sageserver/github
EOF
}

function install_sage {
    $SSH <<EOF | tee -a install.log
        su -l sageserver
        rm -rf sage
        mv github/sage .
        echo 'Compiling Sage'
        cd sage
        export SAGE_ATLAS_LIB=/usr/lib64/atlas/
        export SAGE_KEEP_BUILT_SPKGS=yes
        export MAKE="$MAKE"
        make start
        # install extra sage packages
        yes | ./sage -i qepcad
        # fix permissions on qepcad
        chmod go+r local/bin/qepcad.help
        ./sage <<EOFSAGE
            octave.eval('1+2') # make appropriate octave directory
            # make appropriate qepcad directory
            var('a,b,c,d,x,y,z')
            qf = qepcad_formula
            ellipse = 3*x^2 + 2*x*y + y^2 - x + y - 7
            F = qf.exists(y, ellipse == 0)
            qepcad(F)
            quit
EOFSAGE
EOF
}

function install_sagecell {
    $SSH <<EOF | tee -a install.log
        export MAKE="$MAKE"
        echo 'Installing npm packages'
        npm install -g inherits requirejs coffee-script
        su -l sageserver
        cd sage
        echo 'Installing sagecell'
        ./sage -sh -c "easy_install pip"
        ./sage -i http://boxen.math.washington.edu/home/jason/zeromq-4.0.3.spkg
        ./sage -i pyzmq
        # we need a more recent pyzmq than Sage provides
        ./sage -sh -c "pip install -U pyzmq"
        # We need IPython stuff not present in spkg.
        pushd local/lib/python/site-packages
        rm -rf IPython*
        rm -rf ipython*
        popd
        mv ../github/ipython .
        pushd ipython
        ../sage setup.py develop
        popd
        # we need a cutting-edge matplotlib as well for the new interactive features
        mv ../github/matplotlib .
        pushd matplotlib
        ../sage setup.py install
        popd

        ./sage -sh -c "easy_install ecdsa"
        ./sage -sh -c "easy_install paramiko"
        ./sage -sh -c "easy_install sockjs-tornado"
        ./sage -sh -c "easy_install lockfile"
       
        mv ../github/sagecell .
        cd sagecell/static
        ln -s ../../local/share/jmol .
        cd ..
        ../sage -sh -c "make -B"
EOF
}

function install_extra_python_packages {
    $SSH <<EOF | tee -a install.log
        su -l sageserver
        cd sage
        export MAKE="$MAKE"
        export NETCDF4_LIBDIR=/usr/lib64/
        echo 'Installing extra python packages'
        for i in requests netcdf4 h5py pandas scikit-learn patsy statsmodels numexpr tables scikits-image scimath Shapely SimPy pyproj bitarray ggplot oct2py psutil lxml munkres husl moss https://github.com/mwaskom/seaborn/archive/master.zip
        do
            echo "Installing Python package \$i"
            ./sage -sh -c "pip install -U \$i"
        done
EOF
}

function install_basemap {
    BASEMAP=basemap-1.0.7
    GEOS_DIR=/home/sageserver/sage/local/
    if ! [ -f $BASEMAP.tar.gz ]; then
        wget --progress=dot:mega http://downloads.sourceforge.net/project/matplotlib/matplotlib-toolkits/$BASEMAP/$BASEMAP.tar.gz
    fi
    rsync --progress -avv -e "ssh $SSHOPTIONS -p $VMPORT" $BASEMAP.tar.gz $VMSSH:/tmp/
    $SSH <<EOF | tee -a install.log
        su -l sageserver
        if ! sage/sage -c "import mpl_toolkits.basemap"; then 
            echo "Installing $BASEMAP"
            export MAKE="$MAKE"
            export GEOS_DIR=$GEOS_DIR
            cd /tmp
            tar -xf $BASEMAP.tar.gz
            cd $BASEMAP/geos-3.3.3
            /home/sageserver/sage/sage -sh
                export GEOS_DIR=$GEOS_DIR
                ./configure --prefix=$GEOS_DIR
                make
                make install
                exit
            cd ..
            /home/sageserver/sage/sage setup.py install
        fi
        exit
        cd /tmp
        rm -rf $BASEMAP.tar.gz
EOF
}

function copy_sagecell_system_files {
$SCP vm/vmfiles/sagecell/config.py $VMSSH:/home/sageserver/sage/sagecell/config.py
$SCP vm/vmfiles/sagecell/cron/* $VMSSH:/etc/cron.d/
$SCP vm/vmfiles/sagecell/upstart/* $VMSSH:/etc/init/
$SCP vm/vmfiles/sagecell/rsyslog/* $VMSSH:/etc/rsyslog.d/
$SCP vm/vmfiles/sagecell/sagecell_nginx.conf $VMSSH:/etc/nginx/conf.d/sagecell.conf
$SCP vm/vmfiles/sagecell/root-home/healthcheck $VMSSH:/root/healthcheck

$SSH <<EOF | tee -a install.log
  chown sageserver.sageserver /home/sageserver/sage/sagecell/config.py
  restorecon -R /etc/cron.d/
  restorecon -R /etc/init/
  restorecon -R /etc/rsyslog.d/
  rm -f /etc/nginx/conf.d/default.conf
  restorecon -R /etc/nginx/conf.d/
EOF
}

function copy_database_system_files {
$SCP vm/vmfiles/database/config.py $VMSSH:/home/sageserver/sage/sagecell/config.py
$SCP vm/vmfiles/database/upstart/* $VMSSH:/etc/init/
$SCP vm/vmfiles/database/rsyslog/* $VMSSH:/etc/rsyslog.d/

    $SSH <<EOF | tee -a install.log
  chown sageserver.sageserver /home/sageserver/sage/sagecell/config.py
  restorecon -R /etc/init/
  restorecon -R /etc/rsyslog.d/
EOF
}

function lock_down_sageworker {
    $SSH <<EOF | tee -a install.log
    # set the .sage and init.sage to be immutable.  We do this to prevent
    # someone from making *everyone* execute code at the start of their sessions
    su -l sageworker
    echo 'DihedralGroup(4).cayley_graph()' | /home/sageserver/sage/sage
    touch .sage/init.sage
    mkdir .sage/.python-eggs
    exit
    chattr +i /home/sageworker/.sage /home/sageworker/.sage/init.sage
EOF
}

function set_up_sagecell_firewall {
$SSH <<EOF
  iptables --flush INPUT
  iptables -A INPUT -i lo -j ACCEPT # open up loopback for all traffic
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT # allow established connections
  iptables -A INPUT -p tcp --dport 8888 -j ACCEPT # open up incoming web connections to sage cell server
  iptables -A INPUT -p tcp --dport 8889 -j ACCEPT # open up incoming web connections to nginx
  iptables -A INPUT -p tcp --dport 22 -s 10.0.2.2 -j ACCEPT # open up ssh to host machine
  #iptables -A INPUT -p tcp --dport 22 -j LOG --log-prefix "ssh connection: "
  iptables -P INPUT DROP
  /sbin/service iptables save
EOF
}

function set_up_database_firewall {
$SSH <<EOF
  iptables --flush INPUT
  iptables -A INPUT -i lo -j ACCEPT # open up loopback for all traffic
  #iptables -A INPUT --dport 6514 -m conntrack --ctstate ESTABLISHED,RELATED -j LOG --log-prefix "established/related: "
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT # allow established connections
  #iptables -A INPUT -p tcp --dport 8889 -j LOG --log-prefix "permalink connection: "
  iptables -A INPUT -p tcp --dport 8889 -j ACCEPT # open up incoming web connections to database
  #iptables -A INPUT -p tcp --dport 6514 -j LOG --log-prefix "rsyslog connection: "
  iptables -A INPUT -p tcp --dport 6514 -s sage1.math.washington.edu -j ACCEPT # open up rsyslog connections to sage compute server
  iptables -A INPUT -p tcp --dport 6514 -s sage2.math.washington.edu -j ACCEPT # open up rsyslog connections to sage compute server
  iptables -A INPUT -p tcp --dport 6514 -s sage3.math.washington.edu -j ACCEPT # open up rsyslog connections to sage compute server
  iptables -A INPUT -p tcp --dport 6514 -s sage4.math.washington.edu -j ACCEPT # open up rsyslog connections to sage compute server
  #iptables -A INPUT -p tcp --dport 22 -j LOG --log-prefix "ssh connectionn: " # open up ssh
  iptables -A INPUT -p tcp --dport 22 -s 10.0.2.2 -j ACCEPT # open up ssh
  iptables -P INPUT DROP
  /sbin/service iptables save
EOF
}

function compress_zero {
$SSH <<EOF
  dd if=/dev/zero of=/zerofile ; rm -f /zerofile
EOF
}

function change_hostname {
    $SSH <<EOF
      set -v
      sed -ri 's/^HOSTNAME=.*/HOSTNAME=$1/' /etc/sysconfig/network
      hostname $1
EOF
}
